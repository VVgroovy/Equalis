/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EligibilityRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "ATTESTER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "eligibleAtIndex"
      | "eligibleCount"
      | "getIdentityId"
      | "getRoleAdmin"
      | "grantEligibility"
      | "grantEligibilityBatch"
      | "grantRole"
      | "hasRole"
      | "isEligible"
      | "registerIdentity"
      | "registerIdentityWithProof"
      | "renounceRole"
      | "revokeEligibility"
      | "revokeRole"
      | "setAttester"
      | "setVerifier"
      | "supportsInterface"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EligibilityGranted"
      | "EligibilityRevoked"
      | "IdentityRegistered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "VerifierSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTESTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEligibility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEligibilityBatch",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligible",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentity",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentityWithProof",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEligibility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttester",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ATTESTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEligibilityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentityWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace EligibilityGrantedEvent {
  export type InputTuple = [subject: AddressLike, identityId: BytesLike];
  export type OutputTuple = [subject: string, identityId: string];
  export interface OutputObject {
    subject: string;
    identityId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EligibilityRevokedEvent {
  export type InputTuple = [subject: AddressLike, identityId: BytesLike];
  export type OutputTuple = [subject: string, identityId: string];
  export interface OutputObject {
    subject: string;
    identityId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityRegisteredEvent {
  export type InputTuple = [subject: AddressLike, identityId: BytesLike];
  export type OutputTuple = [subject: string, identityId: string];
  export interface OutputObject {
    subject: string;
    identityId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierSetEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EligibilityRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): EligibilityRegistry;
  waitForDeployment(): Promise<this>;

  interface: EligibilityRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ATTESTER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  eligibleAtIndex: TypedContractMethod<[index: BigNumberish], [string], "view">;

  eligibleCount: TypedContractMethod<[], [bigint], "view">;

  getIdentityId: TypedContractMethod<[subject: AddressLike], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantEligibility: TypedContractMethod<
    [subject: AddressLike],
    [void],
    "nonpayable"
  >;

  grantEligibilityBatch: TypedContractMethod<
    [subjects: AddressLike[]],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isEligible: TypedContractMethod<[subject: AddressLike], [boolean], "view">;

  registerIdentity: TypedContractMethod<
    [subject: AddressLike, identityId: BytesLike],
    [void],
    "nonpayable"
  >;

  registerIdentityWithProof: TypedContractMethod<
    [subject: AddressLike, identityId: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeEligibility: TypedContractMethod<
    [subject: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAttester: TypedContractMethod<
    [attester: AddressLike, isAttester: boolean],
    [void],
    "nonpayable"
  >;

  setVerifier: TypedContractMethod<
    [newVerifier: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ATTESTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eligibleAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "eligibleCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentityId"
  ): TypedContractMethod<[subject: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantEligibility"
  ): TypedContractMethod<[subject: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantEligibilityBatch"
  ): TypedContractMethod<[subjects: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEligible"
  ): TypedContractMethod<[subject: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerIdentity"
  ): TypedContractMethod<
    [subject: AddressLike, identityId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerIdentityWithProof"
  ): TypedContractMethod<
    [subject: AddressLike, identityId: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeEligibility"
  ): TypedContractMethod<[subject: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAttester"
  ): TypedContractMethod<
    [attester: AddressLike, isAttester: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[newVerifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EligibilityGranted"
  ): TypedContractEvent<
    EligibilityGrantedEvent.InputTuple,
    EligibilityGrantedEvent.OutputTuple,
    EligibilityGrantedEvent.OutputObject
  >;
  getEvent(
    key: "EligibilityRevoked"
  ): TypedContractEvent<
    EligibilityRevokedEvent.InputTuple,
    EligibilityRevokedEvent.OutputTuple,
    EligibilityRevokedEvent.OutputObject
  >;
  getEvent(
    key: "IdentityRegistered"
  ): TypedContractEvent<
    IdentityRegisteredEvent.InputTuple,
    IdentityRegisteredEvent.OutputTuple,
    IdentityRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierSet"
  ): TypedContractEvent<
    VerifierSetEvent.InputTuple,
    VerifierSetEvent.OutputTuple,
    VerifierSetEvent.OutputObject
  >;

  filters: {
    "EligibilityGranted(address,bytes32)": TypedContractEvent<
      EligibilityGrantedEvent.InputTuple,
      EligibilityGrantedEvent.OutputTuple,
      EligibilityGrantedEvent.OutputObject
    >;
    EligibilityGranted: TypedContractEvent<
      EligibilityGrantedEvent.InputTuple,
      EligibilityGrantedEvent.OutputTuple,
      EligibilityGrantedEvent.OutputObject
    >;

    "EligibilityRevoked(address,bytes32)": TypedContractEvent<
      EligibilityRevokedEvent.InputTuple,
      EligibilityRevokedEvent.OutputTuple,
      EligibilityRevokedEvent.OutputObject
    >;
    EligibilityRevoked: TypedContractEvent<
      EligibilityRevokedEvent.InputTuple,
      EligibilityRevokedEvent.OutputTuple,
      EligibilityRevokedEvent.OutputObject
    >;

    "IdentityRegistered(address,bytes32)": TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;
    IdentityRegistered: TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "VerifierSet(address)": TypedContractEvent<
      VerifierSetEvent.InputTuple,
      VerifierSetEvent.OutputTuple,
      VerifierSetEvent.OutputObject
    >;
    VerifierSet: TypedContractEvent<
      VerifierSetEvent.InputTuple,
      VerifierSetEvent.OutputTuple,
      VerifierSetEvent.OutputObject
    >;
  };
}
